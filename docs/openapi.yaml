openapi: 3.0.0
info:
  title: Dice Game API
  version: 1.0.0
  description: |
    This API describes the Dice Game API for the Full Fabric Frontend code interview.

    The game is turn-based, strictly between two players. Players take turns attacking or defending against each-other by rolling dice; any damage dealt is decremented from the defending player's HP, until one of them reaches 0, at which point a winner is declared and the game ends.

    The rules are as follows:

    - A game must have two players.
    - Each player starts with the same HP, which defaults to 20.
    - A game is played with a single N-sided die, which defaults to 6 sides.
    - The game starts by selecting the attacker and defender at random.
    - Each turn, each player rolls the die once.
    - The rolls determine the attack and defense values, depending on the player's role that turn.
    - If the attack value is greater than the defense value, the defending player takes damage equal to the difference between the two values.
    - After damage is dealt, and if all players are still alive (HP > 0) their roles are switched.
    - The players continue taking turns attacking and defending until one of them dies and is declared the winner.

    Below are the endpoints available to manage games, assign players, and take turns.

servers:
  - url: http://localhost:8080
    description: Local server

paths:
  /games:
    get:
      summary: List all games
      description: Returns a list of all games in descending order of creation. Includes the game's players in the response.
      operationId: listGames
      responses:
        '200':
          description: List of games retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  games:
                    type: array
                    items:
                      $ref: '#/components/schemas/ListGame'

    post:
      summary: Create a new game
      description: Creates a new game with the default die size and starting HP, if these are not provided. A new Game has no players or turns, so these are not returned.
      operationId: createGame
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateGameRequest'
            example:
              dieSize: 6
              startingHP: 20
      responses:
        '200':
          description: Game created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  game:
                    $ref: '#/components/schemas/NewGame'
                example:
                  game:
                    id: 123e4567-e89b-12d3-a456-426614174000
                    dieSize: 6
                    startingHP: 20
                    startedAt: null
                    winnerId: null

  /games/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      summary: Get game details
      description: Returns the details of a game, including the game's players and turns.
      operationId: showGame
      responses:
        '200':
          description: Game details retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  game:
                    $ref: '#/components/schemas/Game'
        '404':
          description: Game not found

  /games/{id}/join:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    post:
      summary: Join an existing game
      description: Joins a game as a player, if the game is not full. This creates a new Player instance for the caller, and returns its ID.
      operationId: joinGame
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JoinGameRequest'
      responses:
        '200':
          description: Successfully joined the game
          content:
            application/json:
              schema:
                type: object
                properties:
                  game:
                    $ref: '#/components/schemas/Game'
                  playerId:
                    type: string
                    format: uuid
                    description: The ID of the Player that joined the game. Use it to take turns rolling the dice.
        '400':
          description: Game is full
        '404':
          description: Game not found

  /games/{id}/start:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    post:
      summary: Start a game
      description: Starts a game, selecting the attacker and defender at random. The game will have a `startedAt` timestamp and a new Turn with the attacker and defender players.
      operationId: startGame
      responses:
        '200':
          description: Game started successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  game:
                    $ref: '#/components/schemas/Game'
                example:
                  game:
                    id: 123e4567-e89b-12d3-a456-426614174000
                    dieSize: 6
                    startingHP: 20
                    startedAt: '2025-05-30T12:00:00Z'
                    winnerId: null
                    players:
                      - id: 7720ce89-c6fc-4bd9-a970-73b903bf0316
                        name: 'Player 1'
                        hp: 20
                      - id: c7e4f89a-c61d-4968-b4f2-4de9c8f340a4
                        name: 'Player 2'
                        hp: 20
                    turns:
                      - id: ad4d88f5-9d8b-4f87-9686-8ea87e242259
                        attackerId: 7720ce89-c6fc-4bd9-a970-73b903bf0316
                        defenderId: c7e4f89a-c61d-4968-b4f2-4de9c8f340a4
                        attackRoll: null
                        defenseRoll: null
                        createdAt: '2025-05-30T12:00:00Z'
        '400':
          description: Not enough players or game already started
        '404':
          description: Game not found

  /games/{id}/roll:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    post:
      summary: Roll the dice for a turn
      description: |
        Rolls the die for the player, and returns the result.

        If this is the last roll of the turn (both players have rolled), the game will be updated with the result of the damage dealt. If the defending player died, the winner will be declared in the Game object. Otherwise, a new Turn will be created with the attacker and defender roles switched.
      operationId: roll
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RollRequest'
      responses:
        '200':
          description: Roll successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  roll:
                    type: integer
                    minimum: 1
                  game:
                    $ref: '#/components/schemas/Game'
        '400':
          description: Invalid roll request (game not started, already played, etc.)
        '404':
          description: Game not found

components:
  schemas:
    NewGame:
      type: object
      properties:
        id:
          type: string
          format: uuid
        dieSize:
          type: integer
          minimum: 1
          maximum: 100
        startingHP:
          type: integer
          minimum: 1
          maximum: 100
        startedAt:
          type: string
          format: date-time
          nullable: true
        winnerId:
          type: string
          format: uuid
          nullable: true

    ListGame:
      allOf:
        - $ref: '#/components/schemas/NewGame'
        - type: object
          properties:
            players:
              type: array
              items:
                $ref: '#/components/schemas/Player'

    Game:
      allOf:
        - $ref: '#/components/schemas/ListGame'
        - type: object
          properties:
            turns:
              type: array
              items:
                $ref: '#/components/schemas/Turn'

    Player:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        hp:
          type: integer
          minimum: 0

    Turn:
      type: object
      properties:
        id:
          type: string
          format: uuid
        attackerId:
          type: string
          format: uuid
        defenderId:
          type: string
          format: uuid
        attackRoll:
          type: integer
          nullable: true
        defenseRoll:
          type: integer
          nullable: true
        createdAt:
          type: string
          format: date-time

    CreateGameRequest:
      type: object
      properties:
        dieSize:
          type: integer
          minimum: 1
          maximum: 100
        startingHP:
          type: integer
          minimum: 1
          maximum: 100

    JoinGameRequest:
      type: object
      required:
        - playerName
      properties:
        playerName:
          type: string
          description: The name of the player.

    RollRequest:
      type: object
      required:
        - playerId
      properties:
        playerId:
          type: string
          format: uuid
